// Generated by CoffeeScript 1.4.0
(function() {
  var BinaryTree;

  BinaryTree = window.TreeStructure.Binary;

  describe("BinaryTree", function() {
    var testTree;
    testTree = void 0;
    beforeEach(function() {
      return testTree = new BinaryTree();
    });
    describe("When Initialized", function() {
      it("it should not have any children", function() {
        return expect(testTree.hasChildren()).toBeFalsy();
      });
      it("it should not have a value", function() {
        return expect(testTree.hasValue()).toBeFalsy();
      });
      it("it should not be full", function() {
        return expect(testTree.isFull()).toBeFalsy();
      });
      return it("it should have a height of 0", function() {
        return expect(testTree.height).toBe(0);
      });
    });
    describe("When Tree Has One Child", function() {
      beforeEach(function() {
        return testTree.addChild(new BinaryTree());
      });
      it("it should not be full", function() {
        return expect(testTree.isFull()).toBeFalsy();
      });
      return it("it should have a height of 1", function() {
        return expect(testTree.height).toBe(1);
      });
    });
    return describe("When Tree Has Two Children", function() {
      beforeEach(function() {
        testTree.addChild(new BinaryTree());
        return testTree.addChild(new BinaryTree());
      });
      it("it should be full", function() {
        return expect(testTree.isFull()).toBeTruthy();
      });
      it("it should have a height of 1", function() {
        return expect(testTree.height).toBe(1);
      });
      return it("it should not allow any additional children to be added", function() {
        return expect(function() {
          return testTree.addChild(new BinaryTree());
        }).toThrow("Tree Is Full");
      });
    });
  });

}).call(this);
